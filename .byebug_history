c
@result
c
n
@result.success?
n
@result
c
a
n
params
@result
c
n
booked_days.flatten.empty?
intersection
r.start_date
booked_days
c
!booked_days.flatten.empty?
! booked_days.flatten.empty?
booked_days.flatten.empty?
booked_days.flatten
intersection
booked_array
booked_days
c
booked_days.flatten.count
booked_days.flatten
booked_days
c
booked_days.flatten.empty?
booked_days.flatten.count === 0
booked_days.flatten.count
booked_days.flatten
booked_days
c
booked_array & desired_array - desired_array
booked_array & desired_array
intersection
desired_array
booked_array
intersection
c
Reservation.where("listing_id = 2")
Listing.find(2)
@reservation.valid?
@reservation.approval_status
@reservation
c
n
@reservation.new_record? = true
@reservation.persisted?
@reservation.new_record?
@reservation
c
Payment.all
Payment.create(reservation_id: params[:payment][:reservation_id], braintree_transaction_id: @result.transaction.id, status: @result.transaction.status, fourdigit: @result.transaction.credit_card_details.last_4)
a
n
a
c
n
c
Payment.create(reservation_id: params[:payment][:reservation_id], braintree_payment_id: @result.transaction.id, status: @result.transaction.status, fourdigit: @result.transaction.credit_card_details.last_4)
n
params[:payment][:total_price]
params[:payment]
params
amount
c
params
payment_method_nonce
@result
@result.transaction.id
@result
braintree_transaction_id
params[:payment][:reservation_id]
params
n
c
current_user
c
current_user
params
c
user_params
c
current_user
user_params
c
booked_array & desired_array
booked_array = booked_array - my_b
my_b = *(self.start_date..self.end_date)
self.start_date
booked_array
test = *test
test = (r.start_date..r.end_date)
*(r.start_date..r.end_date)
self
r
Reservation.all
r
desired_array
booked_array
intersection
c
n
flash_hash
falsh_hash
n
body
status
n
flash
n
flash
n
errors
n
@errors
errors
n
booked_days
intersection.any?
intersection
n
self.errors.messages.each
self.errors.messages
self.errors
errors
n
@reservation.save == true
@reservation
n
self.errors
errors
intersection
n
booked_days.flatten.count
booked_days
booked_days.flatten.count
booked_days.size
booked_days
booked_array
n
reservation.size
reservation.empty?
c
n
flash[:flashes][:error]
flash.flashes
flash
c
@errors
n
c
n
flash[:error]
flash[:errors]
n
@errors
n
c
n
@errors[0]
errors[0]
@errors
flash[:error]
n
@errors
n
@errors
c
n
@errors
n
@reservation.errors
@reservation
@errors
n
status
n
error
n
transaction
n
transaction
n
@transaction_state.committed?
@transaction_state
n
reservations
reservation
status
changes_applied
reservations
reservation
changes_applied
super
status
n
super(context)
context
errors
n
errors
n
errors
n
@errors
errors
n
errors
@errors
booked_days
n
booked_days
@errors
c
@errors
n
c
@errors
c
@errors.messages[:start_date]
@errors.messages.start_date
@errors.messages
@errors
c
@errors[0]
@errors
n
errors
@errors
n
self.errors
n
self.errors
n
self.errors
n
self.errors
@errors.full_messages
@errors
n
@reservation
n
reservation_params
r
reservation
date_is_valid?
n
@errors
c
n
